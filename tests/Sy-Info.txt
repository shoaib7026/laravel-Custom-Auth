# Laravel Custom Auth System (Code Reference Only)

This repository contains reusable code for a custom Laravel authentication system.  
⚠️ **This is NOT a full Laravel project** — it's a clean and structured reference for quick setup in future projects.

---

## 📋 Project Overview

This system includes:

- ✅ User Registration
- ✅ User Login
- ✅ Password Reset using Gmail SMTP
- ✅ Protected Dashboard
- ✅ Full MVC structure (Controllers, Views, Routing)
- ✅ Uses Laravel's default `users` table

---

## 📂 Included Controllers (Keep these names exactly)

| Controller File Name              | Purpose                          |
|----------------------------------|----------------------------------|
| `dashobard.php`                  | User dashboard                   |
| `Forgotpasswordcontroller.php`   | Forgot password logic            |
| `LoginController.php`            | Handles login                    |
| `ResetPasswordController.php`    | Handles password reset           |
| `Usercontroller.php`             | Handles registration logic       |

---

## 📂 Included Views (Must keep these names unchanged)

| View File Name                   | Purpose                          |
|----------------------------------|----------------------------------|
| `dashboard.blade.php`           | Dashboard UI                     |
| `forgotpassword.blade.php`      | Forgot password form             |
| `login.blade.php`               | Login page                       |
| `Register.blade.php`            | Registration page                |
| `reset-password.blade.php`      | Password reset form              |

---

## 🗃️ Database & Model

- Uses Laravel’s default **`users`** table.
- Default Laravel **User model** used.
- No custom migrations needed.

---

## 🛣️ Routing

All routes are defined inside `routes/web.php` only.  
No API routes are used.

---

## ✉️ Password Reset (SMTP with Gmail)

Set the following in your `.env` file:

```env
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your_email@gmail.com
MAIL_PASSWORD=your_app_password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your_email@gmail.com
MAIL_FROM_NAME="${APP_NAME}"
```

---

## 🛠️ HOW TO USE THIS CODE (Complete Manual Plan)

> ⚠️ Follow these steps **exactly** to avoid errors.

### Step 1: Create Fresh Laravel Project

```bash
laravel new yourprojectname
cd yourprojectname
```

### Step 2: Create All Controllers Manually

In `app/Http/Controllers/`, create these 5 files (same names):

- `dashobard.php`
- `Forgotpasswordcontroller.php`
- `LoginController.php`
- `ResetPasswordController.php`
- `Usercontroller.php`

> 📌 Then open this GitHub repo and copy-paste code into the correct controller files.

---

### Step 3: Create View Files

In `resources/views/`, create these 5 Blade view files:

- `dashboard.blade.php`
- `forgotpassword.blade.php`
- `login.blade.php`
- `Register.blade.php`
- `reset-password.blade.php`

> 📌 Copy-paste content from this repo’s view files into your Laravel app.

---

### Step 4: Set Up Routing

Open your project’s `routes/web.php` file.  
Replace or merge it with the routing logic from this GitHub repo.

---

### Step 5: Configure `.env` File for Email

Edit `.env` and add your Gmail SMTP credentials (as shown above).  
Make sure you allow **less secure apps or app-specific password** from Gmail.

---

### Step 6: Migrate Database

Make sure your `.env` has correct DB config (DB name, username, password). Then run:

```bash
php artisan migrate
```

This will create the default `users` table.

---

### Step 7: Test the Auth System

Now run the Laravel app using:

```bash
php artisan serve
```

Visit `/register`, `/login`, etc., and test your full flow.

---

## ⚠️ IMPORTANT RULES

- ❌ **Do NOT rename any file** — controllers or views — or your code may break.
- ✅ Always follow the same file/folder structure as given.
- 📦 This repo is NOT a complete Laravel app — use it only as a copy-paste code vault.
- 🔁 Perfect for reusing auth logic in future Laravel projects.

---

## 📌 Summary

This repo acts as a **reusable custom Laravel auth starter kit**, giving you:

- Clean code
- No vendor folder issues
- Easy future integration
- Full control over file structure

---

Made with ❤️ by [Your Name]
